#!/usr/local/bin/perl6

my $cwd = qx[pwd].chomp;

if 'lib' !~~ :e {
    say "lib/ doesn't exist. Nothing to do.";
    exit;
}
elsif 'lib' !~~ :d {
    say "lib isn't a directory. Nothing to do.";
    exit;
}

my @module-files = grep { $_ }, split "\n", qx[find lib -name \*.pm];

if !@module-files
   || @module-files.elems == 1 && @module-files[0] ~~ /'no such file'/ {
    say "Found no modules in lib/. Nothing to do.";
    exit;
}

my @modules = map { path-to-module-name($_) }, @module-files;
my %usages_of;
for @module-files -> $module-file {
    my $fh = open($module-file, :r);
    my $module = path-to-module-name($module-file);
    for $fh.lines() {
        if /^\s* 'use' \s+ (\w+ ['::' \w+]*)/ && $0 -> $used {
            next if $used eq 'v6';
            next if $used eq 'MONKEY_TYPING';

            (%usages_of{$module} //= []).push($used);
        }
    }
}

sub path-to-module-name($path) {
    $path.subst(/^'lib/'/, '').subst(/'.pm'$/, '').subst('/', '::', :g);
}

sub module-name-to-path($module-name) {
    'lib/' ~ $module-name.subst('::', '/', :g) ~ '.pm';
}

my @order;

# According to "Introduction to Algorithms" by Cormen et al., topological
# sort is just a depth-first search of a graph where you pay attention to
# the order in which you color the nodes black.
my %color_of = @modules X=> 'white';
for @modules -> $module {
    if %color_of{$module} eq 'white' {
        dfs-visit($module);
    }
}

sub dfs-visit($module) {
    %color_of{$module} = 'gray';
    for %usages_of{$module}.list -> $used {
        if %color_of{$used} eq 'white' {
            dfs-visit($used);
        }
    }
    %color_of{$module} = 'black';
    push @order, $module;
}

my @sources = map { &module-name-to-path($_) }, @order;
my $sources = 'SOURCES=';
my $line-length = 0;
for @sources -> $source {
    $line-length += $source.chars + 1;
    if $line-length > 65 {
                       # SOURCES=
        $sources ~= "\\\n        ";
        $line-length = $source.chars + 1;
    }
    $sources ~= $source ~ ' ';
}
$sources.=trim-trailing;

my $makefile = open 'Makefile', :w;
$makefile.say(q[PERL6=perl6]);
$makefile.say(qq[PERL6LIB='$cwd/lib']);
$makefile.say(q[]);

$makefile.say($sources);

$makefile.say(qq[
PIRS=\$(SOURCES:.pm=.pir)

all: \$(PIRS)

%.pir: %.pm
\tenv PERL6LIB=\$(PERL6LIB) \$(PERL6) --target=pir --output=\$@ \$<

clean:
\trm -f \$(PIRS)

test: all
\tenv PERL6LIB=\$(PERL6LIB) prove -e '\$(PERL6)' -r --nocolor t/]);
